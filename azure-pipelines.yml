variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Pre
    jobs:
      - job: PreTest
        steps:
          - script: echo "Pre test script"
      - job: Pre_Test_2
        steps:
          - script: echo "Another job run"    

  - stage: Test
    jobs:
      - job: TestWork
        strategy:
          matrix:
            demo:
              fileName: 'demo-todo-app.spec.ts'
            example1:
              fileName: 'example.spec.ts'
            example2:
              fileName: 'example2.spec.ts'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                   npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: Cache npm  
            
          - script: |
              npm install
              npx playwright install --with-deps
            displayName:  'Install npm deps'
          - script: npm test -- $(fileName)
          - script: ls
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'results.xml'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'My End-To-End Tests'
            condition: succeededOrFailed()
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: playwright-report
              artifact: playwright-report-$(filename)
              publishLocation: 'pipeline'
            condition: succeededOrFailed()


  - stage: Post
    jobs:
      - job: PostTest
        steps:
          - script: echo "Post test script"
