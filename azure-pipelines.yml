variables:
  npm_config_cache: $(Pipeline.Workspace)/.npm

trigger:
  - main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: Pre
    jobs:
      - job: PreTest
        steps:
          - script: echo "Pre test script"
      - job: Pre_Test_2
        steps:
          - script: echo "Another job run"    

  - stage: Test
    jobs:
      - job: TestWork
        strategy:
          matrix:
            part1:
              name: 'part1'
              shard: '1/3'
            part2:
              name: 'part2'
              shard: '2/3'
            part3:
              name: 'part3'
              shard: '3/3'

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '18.x'
            displayName: 'Install Node.js'
          - task: Cache@2
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                   npm | "$(Agent.OS)"
              path: $(npm_config_cache)
            displayName: Cache npm  
            
          - script: |
              npm install
              npx playwright install --with-deps
            displayName:  'Install npm deps'
          - script: npm test -- --shard=$(shard)
          - script: ls
          - task: PublishTestResults@2
            displayName: 'Publish test results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'results.xml'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: playwright_test_$(name)
            condition: succeededOrFailed()
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'results.xml'
              artifact: playwright-report-$(name)
              publishLocation: 'pipeline'
            condition: succeededOrFailed()


  - stage: Post
    jobs:
      - job: PostTest
        steps:
          - script: echo "Post test script"
          - download: current
            patterns: '**/results.xml'
          - script: mkdir reports
          - script: mv $(Pipeline.Workspace)/playwright-report-part1/results.xml ./reports/part1.xml
          - script: mv $(Pipeline.Workspace)/playwright-report-part2/results.xml ./reports/part2.xml
          - script: mv $(Pipeline.Workspace)/playwright-report-part3/results.xml ./reports/part3.xml
          - script: ls ./reports
          - script: ls
